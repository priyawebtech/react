18. Fragments  3: 03 video
New project
PS C:\Users\Priya\first-react-app> cd Fragments
PS C:\Users\Priya\first-react-app\Fragments> npm create vite@latest

> npx
> create-vite

√ Project name: ... learning-fragment
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in C:\Users\Priya\first-react-app\Fragments\learning-fragment...

Done. Now run:

  cd learning-fragment
  npm install
  npm run dev

PS C:\Users\Priya\first-react-app\Fragments> cd learning-fragment 
PS C:\Users\Priya\first-react-app\Fragments\learning-fragment> npm install
PS C:\Users\Priya\first-react-app\Fragments\learning-fragment> npm i bootstrap@5.3.3

//check on package.json file: dependencies
//in src --delete code: index.css-- del
//main.jsx --del import './index.css'
App.css--make it empty
App.jsx: keep imp thing only 
 add in App.jsx bootstrap css : import "bootstrap/dist/css/bootstrap.min.css";
    import "bootstrap/dist/css/bootstrap.min.css";
    import "./App.css";

function App() {
   return <div>Fragments</div>;
}

export default App;


////
PS C:\Users\Priya\first-react-app\Fragments\learning-fragment> npm run dev

App.jsx : add --- import React from "react";
18. Fragments
 1. What? 
Allows grouping of multiple elements without 
extra DOM nodes.
 2. Why?
 • Return multiple elements without a wrapping 
parent.
 • Cleaner DOM and consistent styling.
 3. How? Two syntaxes:
 1. <React.Fragment>...</React.Fragment>
 2. Short: <>...</>

<<<<<<<<<<<<<<<<<<<<<<<<<<<
 1. <React.Fragment>...</React.Fragment> 
first one you can use and another one also can use
1. eg: of use

 1. <React.Fragment>...</React.Fragment>
    App.jsx 
    import React from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "./App.css";

function App() {
  return (
    <React.Fragment>
      <h1>Healthy Food</h1>
      <ul class="list-group">
        <li class="list-group-item">Dal</li>
        <li class="list-group-item">Green Vegetable</li>
        <li class="list-group-item">Roti</li>
        <li class="list-group-item">Salad</li>
        <li class="list-group-item">Milk</li>
      </ul>
    </React.Fragment>
  );
}

export default App;

<<<<<<<<<<<<<<<<<<<<<<<<<<
2.  2. Short: <>...</> 
this one u can use mostly this one use
  App.jsx 
  import "bootstrap/dist/css/bootstrap.min.css";
import "./App.css";

function App() {
  return (
    <>
      <h1>Healthy Food</h1>
      <ul class="list-group">
        <li class="list-group-item">Dal</li>
        <li class="list-group-item">Green Vegetable</li>
        <li class="list-group-item">Roti</li>
        <li class="list-group-item">Salad</li>
        <li class="list-group-item">Milk</li>
      </ul>
    </>
  );
}

export default App;

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19 Map Method
eg:
App.jsx
  import "bootstrap/dist/css/bootstrap.min.css";
import "./App.css";

function App() {
  let foodItems = ["Dal", "Green Vegetable", "Roti", "Salad", "Milk", "Ghee"];

  return (
    <>
      <h1>Healthy Food</h1>
      <ul className="list-group">
        {foodItems.map((item) => (
          <li key={item} className="list-group-item">
            {item}
          </li>
        ))}
      </ul>
    </>
  );
}

export default App;

////////////////
19. Map Method
 1. Purpose: Render lists from array data.
 2. JSX Elements: Transform array items into JSX.
 3. Inline Rendering: Directly inside JSX
 {items.map(item => <li key={item.id}>{item.name}</li>)}
 4. Key Prop: Assign unique key for optimized re-renders.
 <div key={item.id}>{item.name}</div>



